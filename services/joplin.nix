# Auto-generated using compose2nix v0.2.1-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."notes-app" = {
    image = "joplin/server:latest";
    environment = {
      APP_PORT = "22300";
      DB_CLIENT = "pg";
      MAILER_ENABLED = "0";
      POSTGRES_DATABASE = "joplin";
      POSTGRES_HOST = "db";
      POSTGRES_PASSWORD = "yourpassword";
      POSTGRES_PORT = "5432";
      POSTGRES_USER = "joplin";
      APP_BASE_URL = "http://medellin:22300";
      API_CORS_ALLOW_ORIGIN = "*";
    };
    ports = [
      "22300:22300/tcp"
    ];
    dependsOn = [
      "notes-db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=app"
      "--network=notes_default"
    ];
  };
  systemd.services."podman-notes-app" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "podman-network-notes_default.service"
    ];
    requires = [
      "podman-network-notes_default.service"
    ];
    partOf = [
      "podman-compose-notes-root.target"
    ];
    wantedBy = [
      "podman-compose-notes-root.target"
    ];
  };
  virtualisation.oci-containers.containers."notes-db" = {
    image = "postgres:15";
    environment = {
      POSTGRES_DB = "joplin";
      POSTGRES_PASSWORD = "yourpassword";
      POSTGRES_USER = "joplin";
    };
    volumes = [
      "/home/danielgm/Documents/Services/joplin/joplindb:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=notes_default"
    ];
  };
  systemd.services."podman-notes-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "podman-network-notes_default.service"
      "podman-volume-notes_joplin-data.service"
    ];
    requires = [
      "podman-network-notes_default.service"
      "podman-volume-notes_joplin-data.service"
    ];
    partOf = [
      "podman-compose-notes-root.target"
    ];
    wantedBy = [
      "podman-compose-notes-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-notes_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f notes_default";
    };
    script = ''
      podman network inspect notes_default || podman network create notes_default
    '';
    partOf = [ "podman-compose-notes-root.target" ];
    wantedBy = [ "podman-compose-notes-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-notes_joplin-data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect notes_joplin-data || podman volume create notes_joplin-data
    '';
    partOf = [ "podman-compose-notes-root.target" ];
    wantedBy = [ "podman-compose-notes-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-notes-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
